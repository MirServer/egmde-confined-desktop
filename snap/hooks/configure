#!/bin/bash

set -e

display_changes=0
config_changes=0
egmde_display="$SNAP_USER_DATA/.config/egmde.display"
egmde_config="$SNAP_USER_DATA/.config/egmde.config"

[ ! -d "$SNAP_USER_DATA/.config" ] && mkdir $SNAP_USER_DATA/.config -m 700

# Ensure we have a config file with the fixed options
if [ ! -e "${egmde_config}" ]; then
cat <<EOT > "${egmde_config}"
arw-file=
file=/run/mir_socket
console-provider=vt
EOT
let config_changes+=1
fi

env_hacks=$(sed -n 's/^env-hacks=\(.*\)$/\1/p' ${egmde_config})
if [[ ! ${env_hacks} =~ .*MIR_MESA_KMS_DISABLE_MODESET_PROBE* ]]
then
  sed --in-place '/^env-hacks=/d' ${egmde_config}
  env_hacks=env-hacks=${env_hacks}:MIR_MESA_KMS_DISABLE_MODESET_PROBE
  echo ${env_hacks/=:/=} >> "${egmde_config}"
fi

# display-config
if display_config=$(snapctl get display-config); then
  if [ -n "${display_config}" ]; then
    echo "# DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN" > "${egmde_display}~"
    echo "# USE 'snap set egmde-confined-desktop display-config=...' INSTEAD" >> "${egmde_display}~"
    echo ""                                                                   >> "${egmde_display}~"
    echo "${display_config}"                                                  >> "${egmde_display}~"
    if [ -e "${egmde_display}" ]; then
      if ! diff "${egmde_display}~" "${egmde_display}" > /dev/null; then
        mv "${egmde_display}"  "${egmde_display}.save"
        mv "${egmde_display}~" "${egmde_display}"
        let display_changes+=1
      else
        rm "${egmde_display}~"
      fi
    else
      mv "${egmde_display}~" "${egmde_display}"
      let display_changes+=1
    fi
  else
    if [ -e "${egmde_display}" ]; then
      if grep "# USE 'snap set egmde-confined-desktop display-config=...' INSTEAD" "${egmde_display}"; then
        mv "${egmde_display}"  "${egmde_display}.save"
        let display_changes+=1
      fi
    fi
  fi
fi

# display-layout
display_layout=$(snapctl get display-layout)
if [ "$display_layout" = "" ]
then
  display_layout=default
else
  if [ -e "${egmde_display}" ]; then
    if [ -z "$(grep "^  ${display_layout}:" "${egmde_display}")" ]; then
      echo "ERROR: '$display_layout' is not a layout in ${egmde_display}"
      exit 1
    fi
  else
    if [ "${display_layout}" != "default" ]; then
      echo "ERROR: '$display_layout' is not a layout in ${egmde_display}"
      exit 1
    fi
  fi
fi

display_layout=$(snapctl get display-layout)
if [ "display-layout=${display_layout}" != "$(grep \^display-layout= ${egmde_config})" ]; then
  if [ $config_changes -gt 0 ]; then
    sed '/^display-layout=/d' ${egmde_config}
  else
    sed --in-place=.save '/^display-layout=/d' ${egmde_config}
  fi
  echo display-layout=${display_layout} >> ${egmde_config}
  let config_changes+=1
fi


# vt
vt=$(snapctl get vt)
if [ "$vt" = "" ]
then
  # If 'vt.handoff' is set, Mir only starts first time on the default VT. (#779)
  # Until we understand and fix properly, set the config the way that works.
  if ! grep -q snap_core= /proc/cmdline || ! grep -q vt.handoff= /proc/cmdline
  then snapctl set vt=4
  else snapctl set vt=0
  fi
else
  if [ "vt=${vt}" != "$(grep vt= ${egmde_config})" ]; then
    if [ -n "${vt//[0-9]}" ] || [ ! -e "/dev/tty$vt" ]; then
      echo "ERROR: '$vt' is not a valid VT"
      exit 1
    fi
  fi
fi

vt=$(snapctl get vt)
if [ "vt=${vt}" != "$(grep vt= ${egmde_config})" ]; then
  if [ $config_changes -gt 0 ]; then
    sed '/^vt/d' ${egmde_config}
  else
    sed --in-place=.save '/^vt/d' ${egmde_config}
  fi
  echo vt=${vt} >> ${egmde_config}
  let config_changes+=1
fi


# cursor
cursor=$(snapctl get cursor)
if [ "$cursor" = "" ]
then
  # Workaround for https://github.com/MirServer/mir-kiosk/issues/23
  # "Mouse offset from image on Raspberry Pi 3 with Ubuntu Core 18"
  if grep -q snap_core=core18 /proc/cmdline && grep -q snap_kernel=pi-kernel /proc/cmdline
  then snapctl set cursor=software
  else snapctl set cursor=auto
  fi
else
  if [[ ! "${cursor}" =~ ^(auto|none|software)$ ]]; then
    echo "ERROR: '$cursor' is not a valid cursor option (auto|none|software)"
    exit 1
  fi
fi

cursor=$(snapctl get cursor)
if [ "${cursor}" == "none" ]; then
  cursor="null"
fi

if [ "cursor=${cursor}" != "$(grep cursor= $SNAP_USER_DATA/egmde.config)" ]; then
  if [ $config_changes -gt 0 ]; then
    sed '/^cursor/d' ${egmde_config}
  else
    sed --in-place=.save '/^cursor/d' ${egmde_config}
  fi
  echo cursor=${cursor} >> ${egmde_config}
  let config_changes+=1
fi

# daemon
if [ "$(snapctl get daemon)" = "" ]
then
  if grep -q -e snap_core= -e snapd_recovery_mode= /proc/cmdline
  then snapctl set daemon=true
  else snapctl set daemon=false
  fi
fi

if [ "$(snapctl get daemon)" = "true" ]; then
  if snapctl services ${SNAP_NAME}.daemon | grep -q inactive; then
    snapctl start --enable $SNAP_NAME.daemon 2>&1 || true
  elif [ $(($config_changes+$display_changes)) -gt 0 ]; then
    snapctl restart $SNAP_NAME || true
  fi
else
  snapctl stop --disable $SNAP_NAME.daemon 2>&1 || true
fi
